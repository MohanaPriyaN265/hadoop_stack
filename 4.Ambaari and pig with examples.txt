Ambari - sits on top of all the services
localhost:8080

Apache Pig

sits on top of mapreduce(fixed linear chain of steps),tez(uses DAG to optimize the steps)

pig Latin - scripting language that lets us use sql-like
syntax to define map and reduce steps

Running Pig:
 grunt
 script
 ambari/ hue

*******************************************************************
ex: find the oldest five star movies
step: load data - schema is given at the time of load

#ratings is called relations - info contains series of tuples
#mapper
ratings = LOAD '/user/1996m/ml-100k/u.data' As
         (userID:int , movieID:int , rating:int, ratingTime:int);

metadata = LOAD '/user/1996m/ml-100k/u.item' 
	   USING PigStorage('|') AS
	   (movieID: int,movieTitle: chararray,releaseDate :chararray,videoRelease:chararray,
	imdbLink:chararray);

To check: DUMP metadata;

#take what we need from metadata - transform the date column
nameLookup = FOREACH metadata GENERATE movieID,movieTitle,
	ToUnixTime(ToData(releaseDate,'dd-mmm-yyyy')) AS releaseTime;

#reducer
ratingsByMovie = Group ratings By movieID;
avgRatings = FOREACH ratingsByMovie GENERATE group AS movieID,
	AVG(ratings.ratings) AS avgRating;

fiveStarMovies = FILTER avgRatings BY avgRating > 4.0;

fiveStarsWithData = JOIN fiveStarMovies BY movieID , nameLookup BY movieID;

oldestFiveStarMovies = ORDER fiveStarWithData BY
	nameLookup::releaseTime;
DUMP oldestFiveStarMovies;

Using TEZ instead of mapReduce is much faster as it applies DAG
(almost ten times as fast)

*****************************************************************************************

other commands:

LOAD , STORE ,DUMP
filter , distinct , foreach/generate / mapreduce/ stream/ sample
join cogroup group cross cube
order rank limit
union split

diagnostics : describe,explain,illustrate

UDF: register,define,import

functions: 
avg,concat,count,max,min,size,sum

Loaders:
PigStorage
TextLoader
JsonLoader
AvroStorage
ParquetLoader
OrcsStorage
HBaseStorage

*********************************************************************************************
example: find the most popular bad movie
approach:
find all movies with an average rating less than 2.0
sort them by total number of ratings

ratings = LOAD '/user/1996m/ml-100k/u.data' As
         (userID:int , movieID:int , rating:int, ratingTime:int);

metadata = LOAD '/user/1996m/ml-100k/u.item' 
	   USING PigStorage('|') AS
	   (movieID: int,movieTitle: chararray,releaseDate :chararray,videoRelease:chararray,
	imdbLink:chararray);

#take what we need from metadata - transform the date column
nameLookup = FOREACH metadata GENERATE movieID,movieTitle

ratingsByMovie = Group ratings By movieID;
avgRatings = FOREACH ratingsByMovie GENERATE group AS movieID,
	avg(ratings.ratings) AS avgRating, COUNT (ratings.rating) as numRatings;

badMovies = FILTER avgRatings BY avgRating < 4.0;

namedBadMovies = JOIN badMovies BY movieID , nameLookup BY movieID;

finalResults = FOREACH namedBadMovies GENERATE nameLookup::movieTitle AS movieName,
	badMovies::avgRating AS avgRatings , badMovies::numRatings AS numRatings;

finalResultsSorted = ORDER finalResults BY numRatings DESC;

DUMP finalResultsSorted;







